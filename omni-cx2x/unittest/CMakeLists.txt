# This file is released under terms of BSD license
# See LICENSE file for more information

include(junit.cmake)

# Third party dependencies
set(JUNIT_VERSION "4.12")
set(HAMCREST_VERSION "1.3")
set(JUNIT_JAR ${PROJECT_BINARY_DIR}/build/junit-${JUNIT_VERSION}.jar)
set(HAMCREST_JAR ${PROJECT_BINARY_DIR}/build/hamcrest-core-${HAMCREST_VERSION}.jar)
set(ANTLR_JAR ${PROJECT_BINARY_DIR}/build/${ANTLR_NAME}.jar)
# Local dependencies
set(OMNICX2X_JAR1 ${PROJECT_BINARY_DIR}/build/${OMNI_CX2X_CLAW_NAME}.jar)
set(OMNICX2X_JAR2 ${PROJECT_BINARY_DIR}/build/${OMNI_CX2X_XCODEML_NAME}.jar)

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/helper/TestConstant.java.in
  ${CMAKE_CURRENT_SOURCE_DIR}/helper/TestConstant.java
  @ONLY
)

# Try to download the jar dependencies
if(NOT EXISTS ${JUNIT_JAR})
  message("Try to download junit dependency")
  file(
    DOWNLOAD
    http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar
    ${JUNIT_JAR}
    STATUS status
  )

  list( GET status 0 error_code )
  if( error_code )
    file( REMOVE ${JUNIT_JAR} )
  endif()

endif()

if(NOT EXISTS ${HAMCREST_JAR})
  message("Try to download hamcrest dependency")
  file(
    DOWNLOAD
    http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
    ${HAMCREST_JAR}
  )

  list( GET status 0 error_code )
  if( error_code )
    file( REMOVE ${JUNIT_JAR} )
  endif()

endif()

# Unit tests are not built and executed if third-party dependencies are not
# present.
if(NOT EXISTS ${JUNIT_JAR} OR NOT EXISTS ${HAMCREST_JAR})
  message( WARNING "JUnit jar or Hamcrest could not be downloaded. Unit tests will not be built and executed." )
else()

  set(CMAKE_JAVA_INCLUDE_PATH
    ${LOCAL_OMNI_JAR_TOOLS}
    ${LOCAL_OMNI_JAR_COMMON}
    ${OMNICX2X_JAR1}
    ${OMNICX2X_JAR2}
    ${JUNIT_JAR}
    ${HAMCREST_JAR}
    ${ANTLR_JAR}
  )

  add_jar(omni-cx2x-unittest
    helper/TestConstant.java
    helper/XmlHelper.java
    cx2x/translator/misc/UtilityTest.java
    cx2x/translator/language/ClawRangeTest.java
    cx2x/translator/language/ClawLanguageTest.java
    cx2x/xcodeml/xnode/XbasicTest.java
    cx2x/xcodeml/xnode/XbasicTypeTest.java
    cx2x/xcodeml/xnode/XcodeProgTest.java
    cx2x/xcodeml/xnode/XdeclTableTest.java
    cx2x/xcodeml/xnode/XelementHelperTest.java
    cx2x/xcodeml/xnode/XfunctionTypeTest.java
    cx2x/xcodeml/xnode/XfunctionDefinitionTest.java
    cx2x/xcodeml/xnode/XglobalDeclTest.java
    cx2x/xcodeml/xnode/XidTest.java
    cx2x/xcodeml/xnode/XmoduleDefinitionTest.java
    cx2x/xcodeml/xnode/XsymbolsTest.java
    cx2x/xcodeml/xnode/XtypeTableTest.java
    cx2x/xcodeml/xnode/XvarDeclTest.java
    OUTPUT_DIR ${PROJECT_BINARY_DIR}/build
  )

  get_target_property(UNITTEST_JAR omni-cx2x-unittest JAR_FILE)

  # Add unit test classes
  add_junit_test(junit-xcodeml.xnode
    CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH} ${UNITTEST_JAR}
    TESTS
    cx2x.xcodeml.xnode.XbasicTest
    cx2x.xcodeml.xnode.XbasicTypeTest
    cx2x.xcodeml.xnode.XcodeProgTest
    cx2x.xcodeml.xnode.XdeclTableTest
    cx2x.xcodeml.xnode.XelementHelperTest
    cx2x.xcodeml.xnode.XfunctionTypeTest
    cx2x.xcodeml.xnode.XfunctionDefinitionTest
    cx2x.xcodeml.xnode.XglobalDeclTest
    cx2x.xcodeml.xnode.XidTest
    cx2x.xcodeml.xnode.XmoduleDefinitionTest
    cx2x.xcodeml.xnode.XsymbolsTest
    cx2x.xcodeml.xnode.XtypeTableTest
    cx2x.xcodeml.xnode.XvarDeclTest
  )

  add_junit_test(junit-translator.language
    CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH} ${UNITTEST_JAR}
    TESTS
    cx2x.translator.language.ClawLanguageTest
    cx2x.translator.language.ClawRangeTest
  )

  add_junit_test(junit-misc.utility
    CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH} ${UNITTEST_JAR}
    TESTS
    cx2x.translator.misc.UtilityTest
  )

endif()
