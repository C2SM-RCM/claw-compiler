/*
 * This file is released under terms of BSD license
 * See LICENSE file for more information
 */
package cx2x.translator.transformation.primitive;

import cx2x.translator.config.Configuration;
import cx2x.xcodeml.helper.XnodeUtil;
import cx2x.xcodeml.xnode.Xmod;
import exc.xcodeml.XcodeMLtools_Fmod;
import org.w3c.dom.Document;

import java.io.File;

/**
 * Primitive transformation and test and utility for XcodeML/F and CLAW enhanced
 * module files. This includes:
 * - Locate module file and load it into Xmod object.
 * - Locate CLAW enhanced module file and load it into Xmod object.
 * - Format specific suffix for module writing and search.
 *
 * @author clementval
 */
public final class Module {

  private static final String CLAW_MOD_SUFFIX = "claw";
  private static final String XMOD_FILE_EXTENSION = ".xmod";

  // Avoid instantiation of this class
  private Module() {
  }

  /**
   * Find module by name.
   *
   * @param moduleName   Name of the module.
   * @param moduleSuffix Suffix to the module name.
   * @return A Xmod object representing the module if found. Null otherwise.
   */
  private static Xmod find(String moduleName, String moduleSuffix) {
    if(moduleSuffix == null) {
      moduleSuffix = "";
    }
    for(String dir : XcodeMLtools_Fmod.getSearchPath()) {
      String path = dir + "/" + moduleName + moduleSuffix;
      File f = new File(path);
      if(f.exists()) {
        Document doc = XnodeUtil.readXmlFile(path);
        return doc != null ? new Xmod(doc, moduleName, dir) : null;
      }
    }
    return null;
  }

  /**
   * Find module by name.
   *
   * @param moduleName Name of the module.
   * @return A Xmod object representing the module if found. Null otherwise.
   */
  public static Xmod find(String moduleName) {
    return find(moduleName, XMOD_FILE_EXTENSION);
  }

  /**
   * Locate a module file generated by CLAW translator.
   *
   * @param moduleName Name of the module.
   * @return A Xmod object representing the module if found. Null otherwise.
   */
  public static Xmod findClaw(String moduleName)
  {
    return find(moduleName, getSuffix());
  }

  /**
   * Get a formatted suffix for the CLAW module file including the directive
   * and target of the current transformation.
   * .[directive].[target].claw
   *
   * @return A formatted string for the CLAW module file name.
   */
  public static String getSuffix()
  {
    StringBuilder str = new StringBuilder();
    str.append(".");
    if(Configuration.get().getCurrentDirective() != null) {
      str.append(Configuration.get().getCurrentDirective()).append(".");
    }
    if(Configuration.get().getCurrentTarget() != null) {
      str.append(Configuration.get().getCurrentTarget()).append(".");
    }
    str.append(CLAW_MOD_SUFFIX);
    str.append(XMOD_FILE_EXTENSION);
    return str.toString();
  }

}
