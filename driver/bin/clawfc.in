#!/bin/bash
#
# This file is released under terms of BSD license
# See LICENSE file for more information
#
# clawfc
# Compiler driver for the claw language translation for Fortran language.
# This driver is based on the xmpf90 compiler driver from the OMNI Compiler
# project.
# https://github.com/omni-compiler/omni-compiler/blob/master/Driver/bin/xmpf90.in
#
# author: clementval
#

## TODO cp original file in case of error

### Read configration file and library ###
OM_CX2X_DRIVER_CONF_DIR=@OM_CX2X_DRIVER_CONF_DIR@
OM_CX2X_DRIVER_LIB_DIR=@OM_CX2X_DRIVER_LIB_DIR@
# shellcheck source=../etc/claw_f.conf.in
. ${OM_CX2X_DRIVER_CONF_DIR}/@CLAW_CONF_FILE@
# shellcheck source=../libexec/claw_f_lib.sh.in
. ${OM_CX2X_DRIVER_LIB_DIR}@CLAW_LIB_SH@

### Directory for saving intermediate files ###
current_pid=$$
temp_dir=/tmp/__omni_tmp__${current_pid}
debug_temp_dir="__omni_tmp__"

### Default options ###
FPP_REDIRECT=@FPP_REDIRECT@
only_pp=false
enable_cpp=true
verbose=false
enable_debug=false
enable_debug_omni=false
resolve_dependencies=true
stop_pp=false
stop_frontend=false
stop_translator=false
stop_dependencies=false
force_translation=false
list_target=false
list_directive=false
show_config=false
user_target=false
user_config=false
user_directive=false
line_directive=false
decompiler_max_column=false
dump_cx2x_args=false
force_pure=false
report=false

### Set options ###
# e.g.) clawfc -I/usr/lib myfile.f90
#
#  output_file="a.out"           # Output file
#  f_files="a.f b.F c.f90 d.F90" # All fortran files
#  other_args="-I/usr/lib"       # Options for Preprocessor, Compiler, and
#                                # Linker
#
# To deal with space-separator in options, the following variables are defined
# as an array
#

output_file=""
output_dir=""
f_files=()
f_files_transformation=()
other_args=()

# Additional options defined by command line (e.g. --Wl..)
pp_add_opt=()
frontend_add_opt=()
xcode_translator_add_opt=()
module_opt=()
trans_module_opt=()
include_opt=()

# CLAW special options
target_opt=""
config_opt=""
directive_opt=""
max_columns=""

claw_f_set_parameters "${@+"$@"}"

### List target ###
if [ ${list_target} = true ]; then
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --target-list
  exit 0
fi

### List directive ###
if [ ${list_directive} = true ]; then
   # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --directive-list
  exit 0
fi

### Set correct configuration file info ###
if [ ${user_config} = true ]; then
  OMNI_CX2X_CONFIG_OPT="--config=${config_opt} --schema=${OMNI_CX2X_CONFIG_XSD}"
else
  OMNI_CX2X_CONFIG_OPT="--config=${OMNI_CX2X_CONFIG_DEFAULT} --schema=${OMNI_CX2X_CONFIG_XSD}"
fi

# Set the correct target option for the translator
OMNI_CX2X_TARGET_OPT=""
if [ ${user_target} = true ]; then
  OMNI_CX2X_TARGET_OPT="--target=${target_opt}"
fi

# Set the correct directive option for the translator
OMNI_CX2X_DIRECTIVE_OPT=""
if [ ${user_directive} = true ]; then
  OMNI_CX2X_DIRECTIVE_OPT="--directive=${directive_opt}"
fi

# Set the correct column option for the decompiler
OMNI_CX2X_MAX_COLUMN_OPT=""
if [ ${decompiler_max_column} = true ]; then
  OMNI_CX2X_MAX_COLUMN_OPT="-w ${max_columns}"
else
  OMNI_CX2X_MAX_COLUMN_OPT="-w 80"
fi

# Set the correct line directive option for the decompiler
OMNI_CX2X_LINE_OPT="-l"
if [ ${line_directive} = true ]; then
  OMNI_CX2X_LINE_OPT=""
fi

if [ ${force_pure} = true ]; then
  TRANSLATOR_OPTION="${TRANSLATOR_OPTION} --force-pure"
fi

# Module search path option
OMNI_CX2X_MOD_OPT=""
if [ ${#module_opt[@]} -ne 0 ]; then
  for mod in "${module_opt[@]}"; do
    OMNI_CX2X_MOD_OPT="${OMNI_CX2X_MOD_OPT} ${mod}"
  done
fi

### Show config ###
if [ ${show_config} = true ]; then
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --show-config ${OMNI_CX2X_CONFIG_OPT}
  exit 0
fi

claw_f_check_file_exist

## Check if multiple file, output_dir must be specified and output_file not
if [ ${#f_files[@]} -gt 1 ] && [ "${output_dir}" == "" ]; then
  # Error: multiple files without output directory specified
  echo "Error: output directory not specified"
  exit 1
elif [ "${output_file}" != "" ] && [ "${output_dir}" != "" ]; then
  # Error: output file and output directory defined at the same time
  echo "Error: output directory and output file cannot be specified together"
  exit 1
fi



### Create temporal directory ###
[ ${enable_debug} = true ] && temp_dir=${debug_temp_dir}
[ ${enable_debug_omni} = true ] && temp_dir=${debug_temp_dir}
command_log=${temp_dir}/command_log # TODO can be deleted
error_log=${temp_dir}/error_log     # TODO can be deleted
[ ${enable_debug} = true ] && rm -f ${command_log} ${error_log}
[ ${enable_debug_omni} = true ] && rm -f ${command_log} ${error_log}
# Note that, if temp_dir exists, the temp_dir is not deleted (KAGEMAI #379)

mkdir -p ${temp_dir}
[ ${verbose} = true ] && echo "Create ${temp_dir}/"

### Bypass file without code transformation ###
for input_file in "${f_files[@]}"; do
  if ! [ ${force_translation} == true ]; then
    num_directives=$(grep --count --ignore-case "!\$claw" "${input_file}")
    if [ "${num_directives}" = "0" ]; then
      echo "Warning: file ${input_file} does not contains \$claw. Skip ..."
      if [ "${output_dir}" != "" ]; then
        cp "${input_file}" "${output_dir}"/"${input_file}"
      else
        cp "${input_file}" "${output_file}"
      fi
    else
      f_files_transformation+=("${input_file}")
    fi
  else
    f_files_transformation+=("${input_file}")
  fi
done

### TODO check if f_files_transformation has any files in ...

### Preprocessor ###
[ ${only_pp} = true ] && [ -f "${output_file}" ] && rm "${output_file}"
[ ${enable_cpp} = true ] && OMNI_FPP_OPT="${OMNI_FPP_OPT} ${CPP_OPT}"
for input_file in "${f_files_transformation[@]}"; do
  [ ${verbose} = true ] && echo "Prepocessing ..."

  file_name=$(claw_f_norm_file_name "${input_file}")
  ext=${input_file##*.}
  file_pp1=${temp_dir}/"${file_name}".pp.${ext}
  file_pp=${temp_dir}/"${file_name}".${ext}

  if [ "${ext}" = "F90" ] || [ "${ext}" = "F" ] || [ ${enable_cpp} = true ]; then

    applyPreprocessorPass "${input_file}" "${file_pp1}"
    preprocessor_output=$(basename "${file_pp1%.*}")

    if [ ${FPP_REDIRECT} == true ]; then
      # shellcheck disable=SC2086
      ${OMNI_FPP_CMD} "${include_opt[@]}" "${pp_add_opt[@]}" \
        ${OMNI_FPP_OPT} "${other_args[@]}" "${file_pp1}" > "${file_pp}"
    else
      # shellcheck disable=SC2086
      ${OMNI_FPP_CMD} "${include_opt[@]}" "${pp_add_opt[@]}" \
        ${OMNI_FPP_OPT} "${other_args[@]}" "${file_pp1}"
      mv "${preprocessor_output}.i" "${file_pp}"
    fi

    if [ ${only_pp} = true ]; then
      if [ "${output_file}" = "" ]; then
        cat "${file_pp}"
      else
        cat "${file_pp}" >> "${output_file}" # TODO debug here
      fi
    fi
  fi
done
[ ${stop_pp} = true ] && exit 0;
[ ${only_pp} = true ] && [ ${enable_debug} = true ] && exit 0;
[ ${only_pp} = true ] && { rm -rf ${temp_dir}; exit 0; }

### Apply ignore directive
for input_file in "${f_files_transformation[@]}"; do
  file_name=$(claw_f_norm_file_name "${input_file}")
  ext=${input_file##*.}
  if [ "${ext}" = "F90" ] || [ "${ext}" = "F" ] || [ ${enable_cpp} = true ]; then
    file_pp=${temp_dir}/"${file_name}".${ext}
  else
    file_pp="${input_file}"
  fi
  applyIgnore "${file_pp}"
done

### dependencies resolution ###
if [ ${resolve_dependencies} ]; then
  for input_file in "${f_files_transformation[@]}"; do
    [ ${verbose} = true ] && echo "Dependencies resolution ..."
    file_name=$(claw_f_norm_file_name "${input_file}")
    ext=${input_file##*.}

    if [ "${ext}" = "F90" ] || [ "${ext}" = "F" ] || [ ${enable_cpp} = true ]; then
      file_pp=${temp_dir}/"${file_name}".${ext}
    else
      file_pp="${input_file}"
    fi

    claw_f_process_dependencies "${file_pp}" "${input_file}"
  done
  [ ${stop_dependencies} = true ] && exit 0;
fi

### Frontend ###
for input_file in "${f_files_transformation[@]}"; do
  [ ${verbose} = true ] && echo "Fortran to XcodeML ..."
  file_name=$(claw_f_norm_file_name "${input_file}")
  ext=${input_file##*.}

  if [ "${ext}" = "F90" ] || [ "${ext}" = "F" ] || [ ${enable_cpp} = true ]; then
    file_pp=${temp_dir}/"${file_name}".${ext}
  else
    file_pp="${input_file}"
  fi
  file_in_x=${temp_dir}/"${file_name}"_${ext}_in.xml

  # Call F_Front with the correct arguments
  # shellcheck disable=SC2153,SC2086
  ${OMNI_F2X_CMD} "${include_opt[@]}" "${module_opt[@]}" \
    "${frontend_add_opt[@]}" ${OMNI_F2X_OPT} "${file_pp}" -o "${file_in_x}"
done
[ ${stop_frontend} = true ] && exit 0;

# Add debug flag for the translator options
if [ ${enable_debug} = true ]; then
  TRANSLATOR_OPTION="${TRANSLATOR_OPTION} -d"
fi

### Translator ###
for input_file in "${f_files_transformation[@]}"; do
  [ ${verbose} = true ] && echo "XcodeML to XcodeML translation ..."
  file_name=$(claw_f_norm_file_name "${input_file}")
  ext=${input_file##*.}
  file_in_x=${temp_dir}/"${file_name}"_${ext}_in.xml
  file_out_x=${temp_dir}/"${file_name}"_${ext}_out.xml
  file_out_f=${temp_dir}/"${input_file}"
  if [ "${output_file}" != "" ]; then
    file_out_f=${output_file}
  elif [ "${output_dir}" != "" ]; then
    file_out_f=${output_dir}/${input_file}
  fi

  # Define report file output
  if [ ${report} = true ]; then
    file_out_r="${file_out_f%.*}"
    file_out_r="${file_out_r}.lst"
    TRANSLATOR_OPTION="${TRANSLATOR_OPTION} --report=${file_out_r}"
  fi

  # Dump the arguments pass to the translator for easier debugging
  if [ ${dump_cx2x_args} = true ]; then
    echo "-- [DEBUG] Arguments for omni-cx2x:"
    echo "${TRANSLATOR_OPTION} ${OMNI_CX2X_TARGET_OPT} ${OMNI_CX2X_DIRECTIVE_OPT} \
      ${OMNI_CX2X_CONFIG_OPT} ${OMNI_CX2X_MAX_COLUMN_OPT} ${OMNI_CX2X_LINE_OPT} \
      ${xcode_translator_add_opt*} ${module_opt*} ${trans_module_opt*} \
      -o ${file_out_x} -f ${file_out_f} ${file_in_x}"
  fi

  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} ${TRANSLATOR_OPTION} \
    ${OMNI_CX2X_TARGET_OPT} ${OMNI_CX2X_DIRECTIVE_OPT} ${OMNI_CX2X_CONFIG_OPT} \
    ${OMNI_CX2X_MAX_COLUMN_OPT} ${OMNI_CX2X_LINE_OPT} \
    "${xcode_translator_add_opt[@]}" "${module_opt[@]}" \
    "${trans_module_opt[@]}" -o "${file_out_x}" -f "${file_out_f}" \
    "${file_in_x}"

  # also create ${temp_dir}/${file_name}_${ext}_in.F90
  # Note : The BlueGene/Q 's mpi compiler can compile only *.F90 in XMP process.
  # So that remains .F90 extention after process of the native compilier.
done
[ ${stop_translator} = true ] && exit 0;

### Revert ignore prefix and apply verbatim
for input_file in "${f_files_transformation[@]}"; do
  if [ "${output_file}" != "" ]; then
    file_out_f=${output_file}
  elif [ "${output_dir}" != "" ]; then
    file_out_f=${output_dir}/${input_file}
  fi
  revertIgnore "${file_out_f}"
  applyVerbatim "${file_out_f}"
done

### Delete temporal directory ###
if [ ${enable_debug_omni} = false ] && [ ${enable_debug} = false ]; then
  rm -rf ${temp_dir}
fi

exit 0
