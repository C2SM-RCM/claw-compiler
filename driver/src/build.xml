<!--
 This file is released under terms of BSD license
 See LICENSE file for more information
-->

<!-- CLAWFC build process -->
<project name="clawfc" default="main" basedir=".">
    <description>Build CLAWFC driver</description>

    <!-- Value set externally-->
    <property name="claw.properties.dir" value=""/>
    <property file="${claw.properties.dir}/claw.properties"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.dep}"/>

    <!-- Classpath for the CX2T Translator library -->
    <path id="build.path">
        <pathelement path="${junit.dep}" />
        <pathelement path="${st4.dep}"/>
        <pathelement path="${antlr.dep}"/>
        <pathelement path="${antlr4.dep}"/>
        <pathelement path="${antlr4.runtime.dep}"/>
        <pathelement path="${argparse4j.dep}"/>
        <pathelement path="${claw.wani.dep}"/>
    </path>

    <path id="antlr.path">
        <pathelement path="${st4.dep}"/>
        <pathelement path="${antlr.dep}"/>
        <pathelement path="${antlr4.dep}"/>
        <pathelement path="${antlr4.runtime.dep}"/>
    </path>

    <!-- Dependencies scan parser classes -->
    <property name="dep.scan.parser.dir"
              value="${driver.gen.src.dir}/depscan/parser"/>

    <!-- Initialization step -->
    <target name="init" description="Initialize build directories">
        <tstamp/>
        <mkdir dir="${driver.classes.dir}"/>
        <mkdir dir="${driver.ut.classes.dir}"/>
        <mkdir dir="${dep.scan.parser.dir}"/>
    </target>

    <!-- Check if dependencies scan parsers are up-to-date or need to be re-generated -->
    <target name="antlr" description="Generate parsers from ANTLR grammar file">
        <outofdate outputsources="outdated.sources">
            <sourcefiles>
            <fileset dir="${driver.src.dir}/clawfc/depscan" casesensitive="yes">
              <include name="*.g4"/>
            </fileset>
          </sourcefiles>
          <targetfiles path="${driver.dep}"/>
            <sequential>
                <echo message="  ${outdated.sources}"/>
                <java jvm="${java.exec}" classname="org.antlr.v4.Tool" fork="true" failonerror="true" classpathref="antlr.path">
                    <arg value="-o"/>
                    <arg value="${dep.scan.parser.dir}"/>
                    <arg value="-package"/>
                    <arg value="clawfc.depscan.parser"/>
                    <arg line="${outdated.sources}"/>
                </java>
            </sequential>
        </outofdate>
    </target>

    <target name="compile" depends="antlr" description="compile the source">
        <javac executable="${javac.exec}" fork="yes" includeantruntime="false" srcdir=""
               destdir="${driver.classes.dir}" classpathref="build.path" debug="on">
            <src>
                <pathelement path="${driver.src.dir}"/>
                <pathelement path="${driver.gen.src.dir}"/>
            </src>
        </javac>
    </target>

    <!-- Package compiled files into their own library -->
    <target name="jar" depends="compile" description="package, output to JAR">
        <mkdir dir="${dist.dir}"/>
        <!-- Driver -->
        <jar jarfile="${driver.dep}" basedir="${driver.classes.dir}"
             includes="clawfc/**">
            <manifest>
                <attribute name="Main-Class" value="clawfc.Driver"/>
                <attribute name="Class-Path" value="${driver.runtime.classpath}"/>
            </manifest>
            <zipfileset dir="${driver.conf.dir}"
                includes="${driver.conf.file}"
                fullpath="config/${driver.conf.file}"/>
        </jar>
    </target>

    <!-- Update jar config after install-->
    <target name="post-install" description="Update jar config">
        <copy file="${driver.conf.dir}/${driver.conf.file}" tofile="${driver.conf.dir}/${driver.runtime.conf.file}"/>
        <propertyfile file="${driver.conf.dir}/${driver.runtime.conf.file}">
            <entry key="claw.home" value="${claw.install.dir}"/>
            <entry key="omni.home" value="${xcodeml-tools.install.dir}"/>
        </propertyfile>
        <jar destfile="${claw.install.dir}/bin/${driver.jar}" update="true">
            <zipfileset dir="${driver.conf.dir}"
                includes="${driver.runtime.conf.file}"
                fullpath="config/${driver.conf.file}"/>
        </jar>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${driver.classes.dir}"/>
        <delete dir="${driver.ut.classes.dir}"/>
        <delete file="${driver.dep}"/>
    </target>

    <path id="ut.build.path">
        <pathelement path="${junit.dep}" />
        <pathelement path="${st4.dep}"/>
        <pathelement path="${antlr.dep}"/>
        <pathelement path="${antlr4.dep}"/>
        <pathelement path="${antlr4.runtime.dep}"/>
        <pathelement path="${driver.dep}"/>
    </path>

    <target name="compile-unit-tests" depends="compile" description="compile unit tests source">
        <javac executable="${javac.exec}" fork="yes" includeantruntime="false" srcdir=""
               destdir="${driver.ut.classes.dir}" classpathref="ut.build.path" debug="on">
            <src>
                <pathelement path="${driver.ut.src.dir}"/>
            </src>
        </javac>
    </target>

    <target name="run-unit-tests" depends="compile-unit-tests" description="Run unit tests">
        <path id="ut.runtime.path">
            <pathelement path="${junit.dep}" />
            <pathelement path="${hamcrest.dep}" />
            <pathelement path="${antlr4.runtime.dep}"/>
            <pathelement path="${driver.dep}"/>
            <pathelement path="${driver.ut.classes.dir}"/>
        </path>
        <mkdir dir="${driver.ut.report.dir}"/>
        <junit jvm="${java.exec}" printsummary="yes" haltonfailure="yes">
            <classpath path="${junit.dep}" />
            <classpath path="${hamcrest.dep}" />
            <classpath path="${antlr4.runtime.dep}" />
            <classpath path="${driver.dep}" />
            <classpath path="${driver.ut.classes.dir}" />
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${driver.ut.report.dir}">
                <fileset dir="${driver.ut.classes.dir}">
                    <include name="clawfc/ut/*Test*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Default target -->
    <target name="main" depends="init, antlr, compile, jar"/>
</project>
